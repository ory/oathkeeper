{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "ORY Oathkeeper is a reverse proxy that checks the HTTP Authorization for validity against a set of rules. This service\nuses Hydra to validate access tokens and policies.\n\nOathkeeper",
    "title": "ORY Oathkeeper",
    "contact": {
      "name": "ORY",
      "url": "https://www.ory.am",
      "email": "hi@ory.am"
    },
    "version": "Latest"
  },
  "basePath": "/",
  "paths": {
    "/.well-known/jwks.json": {
      "get": {
        "description": "This endpoint returns public keys for validating the ID tokens issued by ORY Oathkeeper.",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "summary": "Returns well known keys",
        "operationId": "getWellKnown",
        "responses": {
          "200": {
            "description": "jsonWebKeySet",
            "schema": {
              "$ref": "#/definitions/jsonWebKeySet"
            }
          },
          "401": {
            "$ref": "#/responses/genericError"
          },
          "403": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/rules": {
      "get": {
        "description": "This method returns an array of all rules that are stored in the backend. This is useful if you want to get a full\nview of what rules you have currently in place.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "rule"
        ],
        "summary": "List all rules",
        "operationId": "listRules",
        "responses": {
          "200": {
            "$ref": "#/responses/rules"
          },
          "401": {
            "$ref": "#/responses/genericError"
          },
          "403": {
            "$ref": "#/responses/genericError"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      },
      "post": {
        "description": "This method allows creation of rules. If a rule id exists, you will receive an error.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "rule"
        ],
        "summary": "Create a rule",
        "operationId": "createRule",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/rule"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/rule"
          },
          "401": {
            "$ref": "#/responses/genericError"
          },
          "403": {
            "$ref": "#/responses/genericError"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/rules/{id}": {
      "get": {
        "description": "Use this method to retrieve a rule from the storage. If it does not exist you will receive a 404 error.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "rule"
        ],
        "summary": "Retrieve a rule",
        "operationId": "getRule",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/rule"
          },
          "401": {
            "$ref": "#/responses/genericError"
          },
          "403": {
            "$ref": "#/responses/genericError"
          },
          "404": {
            "$ref": "#/responses/genericError"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      },
      "put": {
        "description": "Use this method to update a rule. Keep in mind that you need to send the full rule payload as this endpoint does\nnot support patching.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "rule"
        ],
        "summary": "Update a rule",
        "operationId": "updateRule",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/rule"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/rule"
          },
          "401": {
            "$ref": "#/responses/genericError"
          },
          "403": {
            "$ref": "#/responses/genericError"
          },
          "404": {
            "$ref": "#/responses/genericError"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      },
      "delete": {
        "description": "Use this endpoint to delete a rule.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "rule"
        ],
        "summary": "Delete a rule",
        "operationId": "deleteRule",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/emptyResponse"
          },
          "401": {
            "$ref": "#/responses/genericError"
          },
          "403": {
            "$ref": "#/responses/genericError"
          },
          "404": {
            "$ref": "#/responses/genericError"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    }
  },
  "definitions": {
    "jsonWebKey": {
      "type": "object",
      "properties": {
        "alg": {
          "description": "The \"alg\" (algorithm) parameter identifies the algorithm intended for\nuse with the key.  The values used should either be registered in the\nIANA \"JSON Web Signature and Encryption Algorithms\" registry\nestablished by [JWA] or be a value that contains a Collision-\nResistant Name.",
          "type": "string",
          "x-go-name": "Alg"
        },
        "crv": {
          "type": "string",
          "x-go-name": "Crv"
        },
        "d": {
          "type": "string",
          "x-go-name": "D"
        },
        "dp": {
          "type": "string",
          "x-go-name": "Dp"
        },
        "dq": {
          "type": "string",
          "x-go-name": "Dq"
        },
        "e": {
          "type": "string",
          "x-go-name": "E"
        },
        "k": {
          "type": "string",
          "x-go-name": "K"
        },
        "kid": {
          "description": "The \"kid\" (key ID) parameter is used to match a specific key.  This\nis used, for instance, to choose among a set of keys within a JWK Set\nduring key rollover.  The structure of the \"kid\" value is\nunspecified.  When \"kid\" values are used within a JWK Set, different\nkeys within the JWK Set SHOULD use distinct \"kid\" values.  (One\nexample in which different keys might use the same \"kid\" value is if\nthey have different \"kty\" (key type) values but are considered to be\nequivalent alternatives by the application using them.)  The \"kid\"\nvalue is a case-sensitive string.",
          "type": "string",
          "x-go-name": "Kid"
        },
        "kty": {
          "description": "The \"kty\" (key type) parameter identifies the cryptographic algorithm\nfamily used with the key, such as \"RSA\" or \"EC\". \"kty\" values should\neither be registered in the IANA \"JSON Web Key Types\" registry\nestablished by [JWA] or be a value that contains a Collision-\nResistant Name.  The \"kty\" value is a case-sensitive string.",
          "type": "string",
          "x-go-name": "Kty"
        },
        "n": {
          "type": "string",
          "x-go-name": "N"
        },
        "p": {
          "type": "string",
          "x-go-name": "P"
        },
        "q": {
          "type": "string",
          "x-go-name": "Q"
        },
        "qi": {
          "type": "string",
          "x-go-name": "Qi"
        },
        "use": {
          "description": "The \"use\" (public key use) parameter identifies the intended use of\nthe public key. The \"use\" parameter is employed to indicate whether\na public key is used for encrypting data or verifying the signature\non data. Values are commonly \"sig\" (signature) or \"enc\" (encryption).",
          "type": "string",
          "x-go-name": "Use"
        },
        "x": {
          "type": "string",
          "x-go-name": "X"
        },
        "x5c": {
          "description": "The \"x5c\" (X.509 certificate chain) parameter contains a chain of one\nor more PKIX certificates [RFC5280].  The certificate chain is\nrepresented as a JSON array of certificate value strings.  Each\nstring in the array is a base64-encoded (Section 4 of [RFC4648] --\nnot base64url-encoded) DER [ITU.X690.1994] PKIX certificate value.\nThe PKIX certificate containing the key value MUST be the first\ncertificate.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "X5c"
        },
        "y": {
          "type": "string",
          "x-go-name": "Y"
        }
      },
      "x-go-name": "swaggerJSONWebKey",
      "x-go-package": "github.com/ory/oathkeeper/rsakey"
    },
    "jsonWebKeySet": {
      "type": "object",
      "properties": {
        "keys": {
          "description": "The value of the \"keys\" parameter is an array of JWK values.  By\ndefault, the order of the JWK values within the array does not imply\nan order of preference among them, although applications of JWK Sets\ncan choose to assign a meaning to the order for their purposes, if\ndesired.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/jsonWebKey"
          },
          "x-go-name": "Keys"
        }
      },
      "x-go-name": "swaggerJSONWebKeySet",
      "x-go-package": "github.com/ory/oathkeeper/rsakey"
    },
    "rule": {
      "description": "A rule",
      "type": "object",
      "properties": {
        "description": {
          "description": "A human readable description of this rule.",
          "type": "string",
          "x-go-name": "Description"
        },
        "id": {
          "description": "The ID is the unique id of the rule. It can be at most 190 characters long, but the layout of the ID is up to you.\nYou will need this ID later on to update or delete the rule.",
          "type": "string",
          "x-go-name": "ID"
        },
        "matchesMethods": {
          "description": "An array of HTTP methods (e.g. GET, POST, PUT, DELETE, ...). When ORY Oathkeeper searches for rules\nto decide what to do with an incoming request to the proxy server, it compares the HTTP method of the incoming\nrequest with the HTTP methods of each rules. If a match is found, the rule is considered a partial match.\nIf the matchesUrl field is satisfied as well, the rule is considered a full match.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "MatchesMethods"
        },
        "matchesUrl": {
          "description": "This field represents the URL pattern this rule matches. When ORY Oathkeeper searches for rules\nto decide what to do with an incoming request to the proxy server, it compares the full request URL\n(e.g. https://mydomain.com/api/resource) without query parameters of the incoming\nrequest with this field. If a match is found, the rule is considered a partial match.\nIf the matchesMethods field is satisfied as well, the rule is considered a full match.\n\nYou can use regular expressions in this field to match more than one url. Regular expressions are encapsulated in\nbrackets \u003c and \u003e. The following example matches all paths of the domain `mydomain.com`: `https://mydomain.com/\u003c.*\u003e`.\n\nFor more information refer to: https://ory.gitbooks.io/oathkeeper/content/concepts.html#rules",
          "type": "string",
          "x-go-name": "MatchesURL"
        },
        "mode": {
          "description": "Defines which mode this rule should use. There are four valid modes:\n\nbypass: If set, any authorization logic is completely disabled and the Authorization header is not changed at all.\nThis is useful if you have an endpoint that has it's own authorization logic, for example using basic authorization.\nIf set to true, this setting overrides `basicAuthorizationModeEnabled` and `allowAnonymousModeEnabled`.\nanonymous: If set, the protected endpoint is available to anonymous users. That means that the endpoint is accessible\nwithout having a valid access token. This setting overrides `basicAuthorizationModeEnabled`.\ntoken: If set, disables checks against ORY Hydra's Warden API and uses basic authorization. This means that\nthe access token is validated (e.g. checking if it is expired, check if it claimed the necessary scopes)\nbut does not use the `requiredAction` and `requiredResource` fields for advanced access control.\npolicy: If set, uses ORY Hydra's Warden API for access control using access control policies.",
          "type": "string",
          "x-go-name": "Mode"
        },
        "requiredAction": {
          "description": "This field will be used to decide advanced authorization requests where access control policies are used. A\naction is typically something a user wants to do (e.g. write, read, delete).\nThis field supports expansion as described in the developer guide: https://ory.gitbooks.io/oathkeeper/content/concepts.html#rules",
          "type": "string",
          "x-go-name": "RequiredAction"
        },
        "requiredResource": {
          "description": "This field will be used to decide advanced authorization requests where access control policies are used. A\nresource is typically something a user wants to access (e.g. printer, article, virtual machine).\nThis field supports expansion as described in the developer guide: https://ory.gitbooks.io/oathkeeper/content/concepts.html#rules",
          "type": "string",
          "x-go-name": "RequiredResource"
        },
        "requiredScopes": {
          "description": "An array of OAuth 2.0 scopes that are required when accessing an endpoint protected by this rule.\nIf the token used in the Authorization header did not request that specific scope, the request is denied.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "RequiredScopes"
        }
      },
      "x-go-name": "jsonRule",
      "x-go-package": "github.com/ory/oathkeeper/rule"
    },
    "swaggerCreateRuleParameters": {
      "type": "object",
      "properties": {
        "Body": {
          "$ref": "#/definitions/rule"
        }
      },
      "x-go-package": "github.com/ory/oathkeeper/rule"
    },
    "swaggerGetRuleParameters": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "description": "in: path",
          "type": "string",
          "x-go-name": "ID"
        }
      },
      "x-go-package": "github.com/ory/oathkeeper/rule"
    },
    "swaggerRuleResponse": {
      "description": "A rule",
      "type": "object",
      "properties": {
        "Body": {
          "$ref": "#/definitions/rule"
        }
      },
      "x-go-package": "github.com/ory/oathkeeper/rule"
    },
    "swaggerRulesResponse": {
      "description": "A list of rules",
      "type": "object",
      "properties": {
        "Body": {
          "description": "in: body\ntype: array",
          "type": "array",
          "items": {
            "$ref": "#/definitions/rule"
          }
        }
      },
      "x-go-package": "github.com/ory/oathkeeper/rule"
    },
    "swaggerUpdateRuleParameters": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "Body": {
          "$ref": "#/definitions/rule"
        },
        "id": {
          "description": "in: path",
          "type": "string",
          "x-go-name": "ID"
        }
      },
      "x-go-package": "github.com/ory/oathkeeper/rule"
    }
  },
  "responses": {
    "emptyResponse": {
      "description": "An empty response"
    },
    "genericError": {
      "description": "The standard error format",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Code"
          },
          "details": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            },
            "x-go-name": "Details"
          },
          "message": {
            "type": "string",
            "x-go-name": "Message"
          },
          "reason": {
            "type": "string",
            "x-go-name": "Reason"
          },
          "request": {
            "type": "string",
            "x-go-name": "Request"
          },
          "status": {
            "type": "string",
            "x-go-name": "Status"
          }
        }
      }
    },
    "rule": {
      "description": "A rule",
      "schema": {
        "$ref": "#/definitions/rule"
      }
    },
    "rules": {
      "description": "A list of rules",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/rule"
        }
      }
    }
  },
  "x-forwarded-proto": "string",
  "x-request-id": "string"
}