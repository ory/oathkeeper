// Code generated by go-swagger; DO NOT EDIT.

package rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/ory/oathkeeper/sdk/go/oathkeeper/models"
)

// UpdateRuleReader is a Reader for the UpdateRule structure.
type UpdateRuleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateRuleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateRuleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewUpdateRuleUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewUpdateRuleForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewUpdateRuleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewUpdateRuleInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateRuleOK creates a UpdateRuleOK with default headers values
func NewUpdateRuleOK() *UpdateRuleOK {
	return &UpdateRuleOK{}
}

/*UpdateRuleOK handles this case with default header values.

A rule
*/
type UpdateRuleOK struct {
	Payload *models.SwaggerRule
}

func (o *UpdateRuleOK) Error() string {
	return fmt.Sprintf("[PUT /rules/{id}][%d] updateRuleOK  %+v", 200, o.Payload)
}

func (o *UpdateRuleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SwaggerRule)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRuleUnauthorized creates a UpdateRuleUnauthorized with default headers values
func NewUpdateRuleUnauthorized() *UpdateRuleUnauthorized {
	return &UpdateRuleUnauthorized{}
}

/*UpdateRuleUnauthorized handles this case with default header values.

The standard error format
*/
type UpdateRuleUnauthorized struct {
	Payload *UpdateRuleUnauthorizedBody
}

func (o *UpdateRuleUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /rules/{id}][%d] updateRuleUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateRuleUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateRuleUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRuleForbidden creates a UpdateRuleForbidden with default headers values
func NewUpdateRuleForbidden() *UpdateRuleForbidden {
	return &UpdateRuleForbidden{}
}

/*UpdateRuleForbidden handles this case with default header values.

The standard error format
*/
type UpdateRuleForbidden struct {
	Payload *UpdateRuleForbiddenBody
}

func (o *UpdateRuleForbidden) Error() string {
	return fmt.Sprintf("[PUT /rules/{id}][%d] updateRuleForbidden  %+v", 403, o.Payload)
}

func (o *UpdateRuleForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateRuleForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRuleNotFound creates a UpdateRuleNotFound with default headers values
func NewUpdateRuleNotFound() *UpdateRuleNotFound {
	return &UpdateRuleNotFound{}
}

/*UpdateRuleNotFound handles this case with default header values.

The standard error format
*/
type UpdateRuleNotFound struct {
	Payload *UpdateRuleNotFoundBody
}

func (o *UpdateRuleNotFound) Error() string {
	return fmt.Sprintf("[PUT /rules/{id}][%d] updateRuleNotFound  %+v", 404, o.Payload)
}

func (o *UpdateRuleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateRuleNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRuleInternalServerError creates a UpdateRuleInternalServerError with default headers values
func NewUpdateRuleInternalServerError() *UpdateRuleInternalServerError {
	return &UpdateRuleInternalServerError{}
}

/*UpdateRuleInternalServerError handles this case with default header values.

The standard error format
*/
type UpdateRuleInternalServerError struct {
	Payload *UpdateRuleInternalServerErrorBody
}

func (o *UpdateRuleInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /rules/{id}][%d] updateRuleInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateRuleInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateRuleInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*UpdateRuleForbiddenBody update rule forbidden body
swagger:model UpdateRuleForbiddenBody
*/
type UpdateRuleForbiddenBody struct {

	// code
	Code int64 `json:"code,omitempty"`

	// details
	Details []map[string]interface{} `json:"details"`

	// message
	Message string `json:"message,omitempty"`

	// reason
	Reason string `json:"reason,omitempty"`

	// request
	Request string `json:"request,omitempty"`

	// status
	Status string `json:"status,omitempty"`
}

// Validate validates this update rule forbidden body
func (o *UpdateRuleForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateRuleForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateRuleForbiddenBody) UnmarshalBinary(b []byte) error {
	var res UpdateRuleForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateRuleInternalServerErrorBody update rule internal server error body
swagger:model UpdateRuleInternalServerErrorBody
*/
type UpdateRuleInternalServerErrorBody struct {

	// code
	Code int64 `json:"code,omitempty"`

	// details
	Details []map[string]interface{} `json:"details"`

	// message
	Message string `json:"message,omitempty"`

	// reason
	Reason string `json:"reason,omitempty"`

	// request
	Request string `json:"request,omitempty"`

	// status
	Status string `json:"status,omitempty"`
}

// Validate validates this update rule internal server error body
func (o *UpdateRuleInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateRuleInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateRuleInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res UpdateRuleInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateRuleNotFoundBody update rule not found body
swagger:model UpdateRuleNotFoundBody
*/
type UpdateRuleNotFoundBody struct {

	// code
	Code int64 `json:"code,omitempty"`

	// details
	Details []map[string]interface{} `json:"details"`

	// message
	Message string `json:"message,omitempty"`

	// reason
	Reason string `json:"reason,omitempty"`

	// request
	Request string `json:"request,omitempty"`

	// status
	Status string `json:"status,omitempty"`
}

// Validate validates this update rule not found body
func (o *UpdateRuleNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateRuleNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateRuleNotFoundBody) UnmarshalBinary(b []byte) error {
	var res UpdateRuleNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateRuleUnauthorizedBody update rule unauthorized body
swagger:model UpdateRuleUnauthorizedBody
*/
type UpdateRuleUnauthorizedBody struct {

	// code
	Code int64 `json:"code,omitempty"`

	// details
	Details []map[string]interface{} `json:"details"`

	// message
	Message string `json:"message,omitempty"`

	// reason
	Reason string `json:"reason,omitempty"`

	// request
	Request string `json:"request,omitempty"`

	// status
	Status string `json:"status,omitempty"`
}

// Validate validates this update rule unauthorized body
func (o *UpdateRuleUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateRuleUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateRuleUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res UpdateRuleUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
