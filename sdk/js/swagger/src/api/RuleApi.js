/**
 * ORY Oathkeeper
 * ORY Oathkeeper is a reverse proxy that checks the HTTP Authorization for validity against a set of rules. This service uses Hydra to validate access tokens and policies.
 *
 * OpenAPI spec version: Latest
 * Contact: hi@ory.am
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/InlineResponse401', 'model/Rule'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/InlineResponse401'), require('../model/Rule'));
  } else {
    // Browser globals (root is window)
    if (!root.OryOathkeeper) {
      root.OryOathkeeper = {};
    }
    root.OryOathkeeper.RuleApi = factory(root.OryOathkeeper.ApiClient, root.OryOathkeeper.InlineResponse401, root.OryOathkeeper.Rule);
  }
}(this, function(ApiClient, InlineResponse401, Rule) {
  'use strict';

  /**
   * Rule service.
   * @module api/RuleApi
   * @version Latest
   */

  /**
   * Constructs a new RuleApi. 
   * @alias module:api/RuleApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createRule operation.
     * @callback module:api/RuleApi~createRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Rule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a rule
     * This method allows creation of rules. If a rule id exists, you will receive an error.
     * @param {Object} opts Optional parameters
     * @param {module:model/Rule} opts.body 
     * @param {module:api/RuleApi~createRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Rule}
     */
    this.createRule = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Rule;

      return this.apiClient.callApi(
        '/rules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRule operation.
     * @callback module:api/RuleApi~deleteRuleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a rule
     * Use this endpoint to delete a rule.
     * @param {String} id 
     * @param {module:api/RuleApi~deleteRuleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteRule = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteRule");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/rules/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRule operation.
     * @callback module:api/RuleApi~getRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Rule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a rule
     * Use this method to retrieve a rule from the storage. If it does not exist you will receive a 404 error.
     * @param {String} id 
     * @param {module:api/RuleApi~getRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Rule}
     */
    this.getRule = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRule");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Rule;

      return this.apiClient.callApi(
        '/rules/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listRules operation.
     * @callback module:api/RuleApi~listRulesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Rule>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all rules
     * This method returns an array of all rules that are stored in the backend. This is useful if you want to get a full view of what rules you have currently in place.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The maximum amount of rules returned.
     * @param {Number} opts.offset The offset from where to start looking.
     * @param {module:api/RuleApi~listRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Rule>}
     */
    this.listRules = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Rule];

      return this.apiClient.callApi(
        '/rules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRule operation.
     * @callback module:api/RuleApi~updateRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Rule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a rule
     * Use this method to update a rule. Keep in mind that you need to send the full rule payload as this endpoint does not support patching.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/Rule} opts.body 
     * @param {module:api/RuleApi~updateRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Rule}
     */
    this.updateRule = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateRule");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Rule;

      return this.apiClient.callApi(
        '/rules/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
