// Copyright Â© 2023 Ory Corp
// SPDX-License-Identifier: Apache-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: google.golang.org/grpc/test/grpc_testing (interfaces: TestServiceServer)

// Package middleware_test is a generated GoMock package.
package middleware_test

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc_testing "google.golang.org/grpc/test/grpc_testing"
)

// MockTestServiceServer is a mock of TestServiceServer interface.
type MockTestServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockTestServiceServerMockRecorder
}

// MockTestServiceServerMockRecorder is the mock recorder for MockTestServiceServer.
type MockTestServiceServerMockRecorder struct {
	mock *MockTestServiceServer
}

// NewMockTestServiceServer creates a new mock instance.
func NewMockTestServiceServer(ctrl *gomock.Controller) *MockTestServiceServer {
	mock := &MockTestServiceServer{ctrl: ctrl}
	mock.recorder = &MockTestServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestServiceServer) EXPECT() *MockTestServiceServerMockRecorder {
	return m.recorder
}

// EmptyCall mocks base method.
func (m *MockTestServiceServer) EmptyCall(arg0 context.Context, arg1 *grpc_testing.Empty) (*grpc_testing.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EmptyCall", arg0, arg1)
	ret0, _ := ret[0].(*grpc_testing.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EmptyCall indicates an expected call of EmptyCall.
func (mr *MockTestServiceServerMockRecorder) EmptyCall(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmptyCall", reflect.TypeOf((*MockTestServiceServer)(nil).EmptyCall), arg0, arg1)
}

// FullDuplexCall mocks base method.
func (m *MockTestServiceServer) FullDuplexCall(arg0 grpc_testing.TestService_FullDuplexCallServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullDuplexCall", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// FullDuplexCall indicates an expected call of FullDuplexCall.
func (mr *MockTestServiceServerMockRecorder) FullDuplexCall(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullDuplexCall", reflect.TypeOf((*MockTestServiceServer)(nil).FullDuplexCall), arg0)
}

// HalfDuplexCall mocks base method.
func (m *MockTestServiceServer) HalfDuplexCall(arg0 grpc_testing.TestService_HalfDuplexCallServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HalfDuplexCall", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// HalfDuplexCall indicates an expected call of HalfDuplexCall.
func (mr *MockTestServiceServerMockRecorder) HalfDuplexCall(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HalfDuplexCall", reflect.TypeOf((*MockTestServiceServer)(nil).HalfDuplexCall), arg0)
}

// StreamingInputCall mocks base method.
func (m *MockTestServiceServer) StreamingInputCall(arg0 grpc_testing.TestService_StreamingInputCallServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamingInputCall", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StreamingInputCall indicates an expected call of StreamingInputCall.
func (mr *MockTestServiceServerMockRecorder) StreamingInputCall(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamingInputCall", reflect.TypeOf((*MockTestServiceServer)(nil).StreamingInputCall), arg0)
}

// StreamingOutputCall mocks base method.
func (m *MockTestServiceServer) StreamingOutputCall(arg0 *grpc_testing.StreamingOutputCallRequest, arg1 grpc_testing.TestService_StreamingOutputCallServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamingOutputCall", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StreamingOutputCall indicates an expected call of StreamingOutputCall.
func (mr *MockTestServiceServerMockRecorder) StreamingOutputCall(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamingOutputCall", reflect.TypeOf((*MockTestServiceServer)(nil).StreamingOutputCall), arg0, arg1)
}

// UnaryCall mocks base method.
func (m *MockTestServiceServer) UnaryCall(arg0 context.Context, arg1 *grpc_testing.SimpleRequest) (*grpc_testing.SimpleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnaryCall", arg0, arg1)
	ret0, _ := ret[0].(*grpc_testing.SimpleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnaryCall indicates an expected call of UnaryCall.
func (mr *MockTestServiceServerMockRecorder) UnaryCall(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnaryCall", reflect.TypeOf((*MockTestServiceServer)(nil).UnaryCall), arg0, arg1)
}

// mustEmbedUnimplementedTestServiceServer mocks base method.
func (m *MockTestServiceServer) mustEmbedUnimplementedTestServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedTestServiceServer")
}

// mustEmbedUnimplementedTestServiceServer indicates an expected call of mustEmbedUnimplementedTestServiceServer.
func (mr *MockTestServiceServerMockRecorder) mustEmbedUnimplementedTestServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedTestServiceServer", reflect.TypeOf((*MockTestServiceServer)(nil).mustEmbedUnimplementedTestServiceServer))
}
