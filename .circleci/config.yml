# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2
jobs:
  format:
    docker:
      - image: circleci/golang:1.9
    working_directory: /go/src/github.com/ory/oathkeeper
    steps:
      - checkout
      - run: curl -L -s https://github.com/golang/dep/releases/download/v0.3.2/dep-linux-amd64 -o /go/bin/dep && chmod +x /go/bin/dep
      - run: go get -u golang.org/x/tools/cmd/goimports
      - run: dep ensure -vendor-only
      - run: ./scripts/test-format.sh

  swagger:
    docker:
      - image: circleci/golang:1.9
    working_directory: /go/src/github.com/ory/oathkeeper
    steps:
      - checkout
      - run: curl -L -s https://github.com/golang/dep/releases/download/v0.3.2/dep-linux-amd64 -o /go/bin/dep && chmod +x /go/bin/dep
      - run: go get -u github.com/go-swagger/go-swagger/cmd/swagger golang.org/x/tools/cmd/goimports
      - run: dep ensure -vendor-only
      - run: ./scripts/run-genswag.sh

  test:
    docker:
      - image: circleci/golang:1.9
        environment:
        - PG_URL=postgres://test:test@localhost:5432/oathkeeper?sslmode=disable
        - TEST_HYDRA_URL=http://localhost:4444
        - TEST_HYDRA_CLIENT_ID=root
        - TEST_HYDRA_CLIENT_SECRET=secret
        - FORCE_ROOT_CLIENT_CREDENTIALS=root:secret
      - image: oryd/hydra:v0.10.0-alpha.18
        environment:
        - DATABASE_URL=memory
        command: "host --dangerous-force-http"
      - image: postgres:9.5
        environment:
        - POSTGRES_USER=test
        - POSTGRES_PASSWORD=test
        - POSTGRES_DB=oathkeeper
    working_directory: /go/src/github.com/ory/oathkeeper
    steps:
      - checkout
      - run: go get -u github.com/go-swagger/go-swagger/cmd/swagger github.com/bradfitz/goimports github.com/mattn/goveralls golang.org/x/tools/cmd/cover github.com/ory/go-acc
      - run: curl -L -s https://github.com/golang/dep/releases/download/v0.3.2/dep-linux-amd64 -o /go/bin/dep && chmod +x /go/bin/dep

      # Installation
      - run: curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -
      - run: dep ensure -vendor-only
      - run: go install github.com/ory/oathkeeper

      # Tests
      - run: go-acc -o coverage.txt $(glide novendor)
      - run: go test -race -short $(glide novendor | grep -v cmd)

      # Submit coverage details
      # - run: goveralls -service=circle-ci -coverprofile=coverage.txt -repotoken=$COVERALLS_REPO_TOKEN

  test-docker:
    docker:
      - image: library/docker:17.10
    steps:
      - checkout
      - setup_remote_docker:
          version: 17.10.0-ce
      - run: docker build -f Dockerfile -t oathkeeper-test .
      - run: docker run oathkeeper-test version

  release:
    docker:
      - image: circleci/golang:1.9
    working_directory: /go/src/github.com/ory/oathkeeper
    steps:
      - checkout
      - setup_remote_docker:
          version: 17.10.0-ce
      - run: docker build --build-arg git_tag=$(git describe --tags) --build-arg git_commit=$(git rev-parse HEAD) -f Dockerfile -t oryd/oathkeeper:$CIRCLE_TAG .
      - run: docker login --username "$DOCKER_USERNAME" --password "$DOCKER_PASSWORD"
      - run: docker push oryd/oathkeeper:$CIRCLE_TAG

  publish-docs:
    docker:
      - image: circleci/golang:1.9
    working_directory: /go/src/github.com/ory/oathkeeper
    steps:
      - checkout
      - run: git config --global user.email "hi@ory.am"
      - run: git config --global user.name "ORY Continuous Integration"
      - run: "git clone https://arekkas:$DOCS_TOKEN_PUSH@github.com/ory/ory-am.git ../ory-am"
      - run: "cp -R ./docs/* ../ory-am/docs/2-oathkeeper/"
      - run: "cd ../ory-am; git add -A; git commit -a -m \"docs: Updates ORY Oathkeeper docs\"; git push origin"

workflows:
  version: 2
  "test, build, and relase":
    jobs:
      - format:
          filters:
            tags:
              only: /.*/
      - test:
          filters:
            tags:
              only: /.*/
      - swagger:
          filters:
            tags:
              only: /.*/
      - publish-docs:
          filters:
            branches:
              only: master
      - test-docker:
          requires:
            - test
            - swagger
            - format
          filters:
            tags:
              only: /.*/
      - release:
          requires:
            - test-docker
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
