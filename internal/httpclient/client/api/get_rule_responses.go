// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/ory/oathkeeper/internal/httpclient/models"
)

// GetRuleReader is a Reader for the GetRule structure.
type GetRuleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRuleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRuleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetRuleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetRuleInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetRuleOK creates a GetRuleOK with default headers values
func NewGetRuleOK() *GetRuleOK {
	return &GetRuleOK{}
}

/*
GetRuleOK describes a response with status code 200, with default header values.

A rule
*/
type GetRuleOK struct {
	Payload *models.Rule
}

// IsSuccess returns true when this get rule o k response has a 2xx status code
func (o *GetRuleOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get rule o k response has a 3xx status code
func (o *GetRuleOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get rule o k response has a 4xx status code
func (o *GetRuleOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get rule o k response has a 5xx status code
func (o *GetRuleOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get rule o k response a status code equal to that given
func (o *GetRuleOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetRuleOK) Error() string {
	return fmt.Sprintf("[GET /rules/{id}][%d] getRuleOK  %+v", 200, o.Payload)
}

func (o *GetRuleOK) String() string {
	return fmt.Sprintf("[GET /rules/{id}][%d] getRuleOK  %+v", 200, o.Payload)
}

func (o *GetRuleOK) GetPayload() *models.Rule {
	return o.Payload
}

func (o *GetRuleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Rule)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRuleNotFound creates a GetRuleNotFound with default headers values
func NewGetRuleNotFound() *GetRuleNotFound {
	return &GetRuleNotFound{}
}

/*
GetRuleNotFound describes a response with status code 404, with default header values.

genericError
*/
type GetRuleNotFound struct {
	Payload *models.GenericError
}

// IsSuccess returns true when this get rule not found response has a 2xx status code
func (o *GetRuleNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get rule not found response has a 3xx status code
func (o *GetRuleNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get rule not found response has a 4xx status code
func (o *GetRuleNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get rule not found response has a 5xx status code
func (o *GetRuleNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get rule not found response a status code equal to that given
func (o *GetRuleNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetRuleNotFound) Error() string {
	return fmt.Sprintf("[GET /rules/{id}][%d] getRuleNotFound  %+v", 404, o.Payload)
}

func (o *GetRuleNotFound) String() string {
	return fmt.Sprintf("[GET /rules/{id}][%d] getRuleNotFound  %+v", 404, o.Payload)
}

func (o *GetRuleNotFound) GetPayload() *models.GenericError {
	return o.Payload
}

func (o *GetRuleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GenericError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRuleInternalServerError creates a GetRuleInternalServerError with default headers values
func NewGetRuleInternalServerError() *GetRuleInternalServerError {
	return &GetRuleInternalServerError{}
}

/*
GetRuleInternalServerError describes a response with status code 500, with default header values.

genericError
*/
type GetRuleInternalServerError struct {
	Payload *models.GenericError
}

// IsSuccess returns true when this get rule internal server error response has a 2xx status code
func (o *GetRuleInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get rule internal server error response has a 3xx status code
func (o *GetRuleInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get rule internal server error response has a 4xx status code
func (o *GetRuleInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get rule internal server error response has a 5xx status code
func (o *GetRuleInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get rule internal server error response a status code equal to that given
func (o *GetRuleInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetRuleInternalServerError) Error() string {
	return fmt.Sprintf("[GET /rules/{id}][%d] getRuleInternalServerError  %+v", 500, o.Payload)
}

func (o *GetRuleInternalServerError) String() string {
	return fmt.Sprintf("[GET /rules/{id}][%d] getRuleInternalServerError  %+v", 500, o.Payload)
}

func (o *GetRuleInternalServerError) GetPayload() *models.GenericError {
	return o.Payload
}

func (o *GetRuleInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GenericError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
