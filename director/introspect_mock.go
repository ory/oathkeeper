// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/ory-am/hydra/oauth2 (interfaces: Introspector)

package director

import (
	gomock "github.com/golang/mock/gomock"
	oauth2 "github.com/ory-am/hydra/oauth2"
	context "golang.org/x/net/context"
)

// Mock of Introspector interface
type MockIntrospector struct {
	ctrl     *gomock.Controller
	recorder *_MockIntrospectorRecorder
}

// Recorder for MockIntrospector (not exported)
type _MockIntrospectorRecorder struct {
	mock *MockIntrospector
}

func NewMockIntrospector(ctrl *gomock.Controller) *MockIntrospector {
	mock := &MockIntrospector{ctrl: ctrl}
	mock.recorder = &_MockIntrospectorRecorder{mock}
	return mock
}

func (_m *MockIntrospector) EXPECT() *_MockIntrospectorRecorder {
	return _m.recorder
}

func (_m *MockIntrospector) IntrospectToken(_param0 context.Context, _param1 string, _param2 ...string) (*oauth2.Introspection, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "IntrospectToken", _s...)
	ret0, _ := ret[0].(*oauth2.Introspection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIntrospectorRecorder) IntrospectToken(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IntrospectToken", _s...)
}
