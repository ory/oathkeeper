// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/ory-am/hydra/firewall (interfaces: Firewall)

package director

import (
	gomock "github.com/golang/mock/gomock"
	firewall "github.com/ory-am/hydra/firewall"
	context "golang.org/x/net/context"
	http "net/http"
)

// Mock of Firewall interface
type MockFirewall struct {
	ctrl     *gomock.Controller
	recorder *_MockFirewallRecorder
}

// Recorder for MockFirewall (not exported)
type _MockFirewallRecorder struct {
	mock *MockFirewall
}

func NewMockFirewall(ctrl *gomock.Controller) *MockFirewall {
	mock := &MockFirewall{ctrl: ctrl}
	mock.recorder = &_MockFirewallRecorder{mock}
	return mock
}

func (_m *MockFirewall) EXPECT() *_MockFirewallRecorder {
	return _m.recorder
}

func (_m *MockFirewall) IsAllowed(_param0 context.Context, _param1 *firewall.AccessRequest) error {
	ret := _m.ctrl.Call(_m, "IsAllowed", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockFirewallRecorder) IsAllowed(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsAllowed", arg0, arg1)
}

func (_m *MockFirewall) TokenAllowed(_param0 context.Context, _param1 string, _param2 *firewall.TokenAccessRequest, _param3 ...string) (*firewall.Context, error) {
	_s := []interface{}{_param0, _param1, _param2}
	for _, _x := range _param3 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "TokenAllowed", _s...)
	ret0, _ := ret[0].(*firewall.Context)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFirewallRecorder) TokenAllowed(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TokenAllowed", _s...)
}

func (_m *MockFirewall) TokenFromRequest(_param0 *http.Request) string {
	ret := _m.ctrl.Call(_m, "TokenFromRequest", _param0)
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockFirewallRecorder) TokenFromRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TokenFromRequest", arg0)
}
