// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/ory/hydra/sdk/go/hydra (interfaces: SDK)

// Copyright Â© 2017-2018 Aeneas Rekkas <aeneas+oss@aeneas.io>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
package evaluator

import (
	gomock "github.com/golang/mock/gomock"
	swagger "github.com/ory/hydra/sdk/go/hydra/swagger"
	oauth2 "golang.org/x/oauth2"
	clientcredentials "golang.org/x/oauth2/clientcredentials"
)

// Mock of SDK interface
type MockSDK struct {
	ctrl     *gomock.Controller
	recorder *_MockSDKRecorder
}

// Recorder for MockSDK (not exported)
type _MockSDKRecorder struct {
	mock *MockSDK
}

func NewMockSDK(ctrl *gomock.Controller) *MockSDK {
	mock := &MockSDK{ctrl: ctrl}
	mock.recorder = &_MockSDKRecorder{mock}
	return mock
}

func (_m *MockSDK) EXPECT() *_MockSDKRecorder {
	return _m.recorder
}

func (_m *MockSDK) AcceptOAuth2ConsentRequest(_param0 string, _param1 swagger.ConsentRequestAcceptance) (*swagger.APIResponse, error) {
	ret := _m.ctrl.Call(_m, "AcceptOAuth2ConsentRequest", _param0, _param1)
	ret0, _ := ret[0].(*swagger.APIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSDKRecorder) AcceptOAuth2ConsentRequest(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AcceptOAuth2ConsentRequest", arg0, arg1)
}

func (_m *MockSDK) AddMembersToGroup(_param0 string, _param1 swagger.GroupMembers) (*swagger.APIResponse, error) {
	ret := _m.ctrl.Call(_m, "AddMembersToGroup", _param0, _param1)
	ret0, _ := ret[0].(*swagger.APIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSDKRecorder) AddMembersToGroup(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddMembersToGroup", arg0, arg1)
}

func (_m *MockSDK) CreateGroup(_param0 swagger.Group) (*swagger.Group, *swagger.APIResponse, error) {
	ret := _m.ctrl.Call(_m, "CreateGroup", _param0)
	ret0, _ := ret[0].(*swagger.Group)
	ret1, _ := ret[1].(*swagger.APIResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockSDKRecorder) CreateGroup(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateGroup", arg0)
}

func (_m *MockSDK) CreateJsonWebKeySet(_param0 string, _param1 swagger.JsonWebKeySetGeneratorRequest) (*swagger.JsonWebKeySet, *swagger.APIResponse, error) {
	ret := _m.ctrl.Call(_m, "CreateJsonWebKeySet", _param0, _param1)
	ret0, _ := ret[0].(*swagger.JsonWebKeySet)
	ret1, _ := ret[1].(*swagger.APIResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockSDKRecorder) CreateJsonWebKeySet(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateJsonWebKeySet", arg0, arg1)
}

func (_m *MockSDK) CreateOAuth2Client(_param0 swagger.OAuth2Client) (*swagger.OAuth2Client, *swagger.APIResponse, error) {
	ret := _m.ctrl.Call(_m, "CreateOAuth2Client", _param0)
	ret0, _ := ret[0].(*swagger.OAuth2Client)
	ret1, _ := ret[1].(*swagger.APIResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockSDKRecorder) CreateOAuth2Client(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateOAuth2Client", arg0)
}

func (_m *MockSDK) CreatePolicy(_param0 swagger.Policy) (*swagger.Policy, *swagger.APIResponse, error) {
	ret := _m.ctrl.Call(_m, "CreatePolicy", _param0)
	ret0, _ := ret[0].(*swagger.Policy)
	ret1, _ := ret[1].(*swagger.APIResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockSDKRecorder) CreatePolicy(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreatePolicy", arg0)
}

func (_m *MockSDK) DeleteGroup(_param0 string) (*swagger.APIResponse, error) {
	ret := _m.ctrl.Call(_m, "DeleteGroup", _param0)
	ret0, _ := ret[0].(*swagger.APIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSDKRecorder) DeleteGroup(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteGroup", arg0)
}

func (_m *MockSDK) DeleteJsonWebKey(_param0 string, _param1 string) (*swagger.APIResponse, error) {
	ret := _m.ctrl.Call(_m, "DeleteJsonWebKey", _param0, _param1)
	ret0, _ := ret[0].(*swagger.APIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSDKRecorder) DeleteJsonWebKey(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteJsonWebKey", arg0, arg1)
}

func (_m *MockSDK) DeleteJsonWebKeySet(_param0 string) (*swagger.APIResponse, error) {
	ret := _m.ctrl.Call(_m, "DeleteJsonWebKeySet", _param0)
	ret0, _ := ret[0].(*swagger.APIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSDKRecorder) DeleteJsonWebKeySet(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteJsonWebKeySet", arg0)
}

func (_m *MockSDK) DeleteOAuth2Client(_param0 string) (*swagger.APIResponse, error) {
	ret := _m.ctrl.Call(_m, "DeleteOAuth2Client", _param0)
	ret0, _ := ret[0].(*swagger.APIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSDKRecorder) DeleteOAuth2Client(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteOAuth2Client", arg0)
}

func (_m *MockSDK) DeletePolicy(_param0 string) (*swagger.APIResponse, error) {
	ret := _m.ctrl.Call(_m, "DeletePolicy", _param0)
	ret0, _ := ret[0].(*swagger.APIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSDKRecorder) DeletePolicy(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeletePolicy", arg0)
}

func (_m *MockSDK) DoesWardenAllowAccessRequest(_param0 swagger.WardenAccessRequest) (*swagger.WardenAccessRequestResponse, *swagger.APIResponse, error) {
	ret := _m.ctrl.Call(_m, "DoesWardenAllowAccessRequest", _param0)
	ret0, _ := ret[0].(*swagger.WardenAccessRequestResponse)
	ret1, _ := ret[1].(*swagger.APIResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockSDKRecorder) DoesWardenAllowAccessRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DoesWardenAllowAccessRequest", arg0)
}

func (_m *MockSDK) DoesWardenAllowTokenAccessRequest(_param0 swagger.WardenTokenAccessRequest) (*swagger.WardenTokenAccessRequestResponse, *swagger.APIResponse, error) {
	ret := _m.ctrl.Call(_m, "DoesWardenAllowTokenAccessRequest", _param0)
	ret0, _ := ret[0].(*swagger.WardenTokenAccessRequestResponse)
	ret1, _ := ret[1].(*swagger.APIResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockSDKRecorder) DoesWardenAllowTokenAccessRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DoesWardenAllowTokenAccessRequest", arg0)
}

func (_m *MockSDK) FindGroupsByMember(_param0 string) ([]swagger.Group, *swagger.APIResponse, error) {
	ret := _m.ctrl.Call(_m, "FindGroupsByMember", _param0)
	ret0, _ := ret[0].([]swagger.Group)
	ret1, _ := ret[1].(*swagger.APIResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockSDKRecorder) FindGroupsByMember(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FindGroupsByMember", arg0)
}

func (_m *MockSDK) GetGroup(_param0 string) (*swagger.Group, *swagger.APIResponse, error) {
	ret := _m.ctrl.Call(_m, "GetGroup", _param0)
	ret0, _ := ret[0].(*swagger.Group)
	ret1, _ := ret[1].(*swagger.APIResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockSDKRecorder) GetGroup(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetGroup", arg0)
}

func (_m *MockSDK) GetJsonWebKey(_param0 string, _param1 string) (*swagger.JsonWebKeySet, *swagger.APIResponse, error) {
	ret := _m.ctrl.Call(_m, "GetJsonWebKey", _param0, _param1)
	ret0, _ := ret[0].(*swagger.JsonWebKeySet)
	ret1, _ := ret[1].(*swagger.APIResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockSDKRecorder) GetJsonWebKey(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetJsonWebKey", arg0, arg1)
}

func (_m *MockSDK) GetJsonWebKeySet(_param0 string) (*swagger.JsonWebKeySet, *swagger.APIResponse, error) {
	ret := _m.ctrl.Call(_m, "GetJsonWebKeySet", _param0)
	ret0, _ := ret[0].(*swagger.JsonWebKeySet)
	ret1, _ := ret[1].(*swagger.APIResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockSDKRecorder) GetJsonWebKeySet(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetJsonWebKeySet", arg0)
}

func (_m *MockSDK) GetOAuth2Client(_param0 string) (*swagger.OAuth2Client, *swagger.APIResponse, error) {
	ret := _m.ctrl.Call(_m, "GetOAuth2Client", _param0)
	ret0, _ := ret[0].(*swagger.OAuth2Client)
	ret1, _ := ret[1].(*swagger.APIResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockSDKRecorder) GetOAuth2Client(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetOAuth2Client", arg0)
}

func (_m *MockSDK) GetOAuth2ClientConfig() *clientcredentials.Config {
	ret := _m.ctrl.Call(_m, "GetOAuth2ClientConfig")
	ret0, _ := ret[0].(*clientcredentials.Config)
	return ret0
}

func (_mr *_MockSDKRecorder) GetOAuth2ClientConfig() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetOAuth2ClientConfig")
}

func (_m *MockSDK) GetOAuth2Config() *oauth2.Config {
	ret := _m.ctrl.Call(_m, "GetOAuth2Config")
	ret0, _ := ret[0].(*oauth2.Config)
	return ret0
}

func (_mr *_MockSDKRecorder) GetOAuth2Config() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetOAuth2Config")
}

func (_m *MockSDK) GetOAuth2ConsentRequest(_param0 string) (*swagger.OAuth2ConsentRequest, *swagger.APIResponse, error) {
	ret := _m.ctrl.Call(_m, "GetOAuth2ConsentRequest", _param0)
	ret0, _ := ret[0].(*swagger.OAuth2ConsentRequest)
	ret1, _ := ret[1].(*swagger.APIResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockSDKRecorder) GetOAuth2ConsentRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetOAuth2ConsentRequest", arg0)
}

func (_m *MockSDK) GetPolicy(_param0 string) (*swagger.Policy, *swagger.APIResponse, error) {
	ret := _m.ctrl.Call(_m, "GetPolicy", _param0)
	ret0, _ := ret[0].(*swagger.Policy)
	ret1, _ := ret[1].(*swagger.APIResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockSDKRecorder) GetPolicy(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetPolicy", arg0)
}

func (_m *MockSDK) GetWellKnown() (*swagger.WellKnown, *swagger.APIResponse, error) {
	ret := _m.ctrl.Call(_m, "GetWellKnown")
	ret0, _ := ret[0].(*swagger.WellKnown)
	ret1, _ := ret[1].(*swagger.APIResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockSDKRecorder) GetWellKnown() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetWellKnown")
}

func (_m *MockSDK) IntrospectOAuth2Token(_param0 string, _param1 string) (*swagger.OAuth2TokenIntrospection, *swagger.APIResponse, error) {
	ret := _m.ctrl.Call(_m, "IntrospectOAuth2Token", _param0, _param1)
	ret0, _ := ret[0].(*swagger.OAuth2TokenIntrospection)
	ret1, _ := ret[1].(*swagger.APIResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockSDKRecorder) IntrospectOAuth2Token(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IntrospectOAuth2Token", arg0, arg1)
}

func (_m *MockSDK) ListOAuth2Clients() ([]swagger.OAuth2Client, *swagger.APIResponse, error) {
	ret := _m.ctrl.Call(_m, "ListOAuth2Clients")
	ret0, _ := ret[0].([]swagger.OAuth2Client)
	ret1, _ := ret[1].(*swagger.APIResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockSDKRecorder) ListOAuth2Clients() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListOAuth2Clients")
}

func (_m *MockSDK) ListPolicies(_param0 int64, _param1 int64) ([]swagger.Policy, *swagger.APIResponse, error) {
	ret := _m.ctrl.Call(_m, "ListPolicies", _param0, _param1)
	ret0, _ := ret[0].([]swagger.Policy)
	ret1, _ := ret[1].(*swagger.APIResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockSDKRecorder) ListPolicies(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListPolicies", arg0, arg1)
}

func (_m *MockSDK) RejectOAuth2ConsentRequest(_param0 string, _param1 swagger.ConsentRequestRejection) (*swagger.APIResponse, error) {
	ret := _m.ctrl.Call(_m, "RejectOAuth2ConsentRequest", _param0, _param1)
	ret0, _ := ret[0].(*swagger.APIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSDKRecorder) RejectOAuth2ConsentRequest(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RejectOAuth2ConsentRequest", arg0, arg1)
}

func (_m *MockSDK) RemoveMembersFromGroup(_param0 string, _param1 swagger.GroupMembers) (*swagger.APIResponse, error) {
	ret := _m.ctrl.Call(_m, "RemoveMembersFromGroup", _param0, _param1)
	ret0, _ := ret[0].(*swagger.APIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSDKRecorder) RemoveMembersFromGroup(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoveMembersFromGroup", arg0, arg1)
}

func (_m *MockSDK) RevokeOAuth2Token(_param0 string) (*swagger.APIResponse, error) {
	ret := _m.ctrl.Call(_m, "RevokeOAuth2Token", _param0)
	ret0, _ := ret[0].(*swagger.APIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSDKRecorder) RevokeOAuth2Token(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RevokeOAuth2Token", arg0)
}

func (_m *MockSDK) UpdateJsonWebKey(_param0 string, _param1 string, _param2 swagger.JsonWebKey) (*swagger.JsonWebKey, *swagger.APIResponse, error) {
	ret := _m.ctrl.Call(_m, "UpdateJsonWebKey", _param0, _param1, _param2)
	ret0, _ := ret[0].(*swagger.JsonWebKey)
	ret1, _ := ret[1].(*swagger.APIResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockSDKRecorder) UpdateJsonWebKey(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateJsonWebKey", arg0, arg1, arg2)
}

func (_m *MockSDK) UpdateJsonWebKeySet(_param0 string, _param1 swagger.JsonWebKeySet) (*swagger.JsonWebKeySet, *swagger.APIResponse, error) {
	ret := _m.ctrl.Call(_m, "UpdateJsonWebKeySet", _param0, _param1)
	ret0, _ := ret[0].(*swagger.JsonWebKeySet)
	ret1, _ := ret[1].(*swagger.APIResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockSDKRecorder) UpdateJsonWebKeySet(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateJsonWebKeySet", arg0, arg1)
}

func (_m *MockSDK) UpdateOAuth2Client(_param0 string, _param1 swagger.OAuth2Client) (*swagger.OAuth2Client, *swagger.APIResponse, error) {
	ret := _m.ctrl.Call(_m, "UpdateOAuth2Client", _param0, _param1)
	ret0, _ := ret[0].(*swagger.OAuth2Client)
	ret1, _ := ret[1].(*swagger.APIResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockSDKRecorder) UpdateOAuth2Client(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateOAuth2Client", arg0, arg1)
}

func (_m *MockSDK) UpdatePolicy(_param0 string, _param1 swagger.Policy) (*swagger.Policy, *swagger.APIResponse, error) {
	ret := _m.ctrl.Call(_m, "UpdatePolicy", _param0, _param1)
	ret0, _ := ret[0].(*swagger.Policy)
	ret1, _ := ret[1].(*swagger.APIResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockSDKRecorder) UpdatePolicy(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdatePolicy", arg0, arg1)
}
